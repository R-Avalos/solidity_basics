// Crypto zombies lesson 1

// Overview
// Zombie attributes based on 16 digit integer using modulo operations

// State variables are variables PERMANENTLY stored in the contract on the Ethereum blockchain  (push to database)

// uint = only positive integers (no negative "sing" for unsigned integers). int = can be negative or positive

// Structs
// Structs allow more complicated data types with multiple properties
e.g.
struct Person {
	uint age;
	string name;
	uint stamina;
	uint charisma;
	uint strength;
	uint intelligence;
}

//////////////  Arrays
// fixed and dynamic arrays
uint[2] fixedArray; = array with fixed lenghth of 2 elements
uint[] dyanmicArray; = array with no fixed length
One can create an array of structs...
Person[] people; = dynamic array titled people, that holds persons

Public Arrays... declare an array as public and Solidity will create a "getter" method.
Person[] public people;

Push Items to an array.    array.push
Person Bob = Person(42, "Bob"); // create a person entity Bob
people.push(Bob); // Push Bob entity into the people array.   array.action is the convention
or declare in one line:
people.push(Person(42, "Bob")) 
Items are placed in order of pushed into array

////////////// Functions
Functions are PUBLIC by default, which means any other contract can call upon it
Best to make functions PRIVATE by default, only making them public for specific use cases
 		_PrivateFunctions should start with an underscore, by convention
		PublicFunctions do not have an underscore, by convention
		name_of_function _(_paramaterA, _parameterB, _parameterC) private {} // declare private
Function _parameters, as a convention, start with an underscore to seperate them from global variables
Standard function that takes parameters, does an operation, and provides output

Return Values within function
string hello_string = "meow"; 
function test() public returns (string) {
	return hello_string;
} // returns hello string 

// View Functions, for when one wants to view data but not modify or add 
function HelloKittah() public view returns(string) {
	return hello_string;
}

// Pure Functions, read nothing from app/contract, simply perform operations on the supplied parameters
function _multiply(uint a, uint b) private pure returns(uint) {
	return a * b;
} // multiplies the supplied a and b parameters together


///// Typecasting, converting between data types
keccak256 is a hash function, but not totally secure random number generation

uint8 a = 5;
uint b = 6;
uint8 c = a * b; // errors, because a * b returns uint, not a uint8
unint8 c = a * uint8(b); // corrects error by chaning type of b from uint to uint8

